/*
 * Inventory.java
 * TEAM LEGENDARY INC.
 *
 * Created on May 12, 2008, 3:36 PM
 * Updated on 15 May 2008 ===== **NOTE: Changed from JPanel to JPane b/c of issues with visibility
 * Completed on 26 May 2008
 */


import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author  kfryauff
 */
public class Inventory extends javax.swing.JFrame {

    /** Creates new form Inventory */
    public Inventory() {//new ActionListener()); {
        /*calls initComponents method to build GUI*/
        initComponents();

        /*Opens a file that has already been created in the file */
        File file = new File("DO_NOT_DELETE.txt");
        if (file == null) {
            return;
        }
        BufferedReader input = null;
        try {
            input = new BufferedReader(new FileReader(file));
        } catch (FileNotFoundException e) {
        	file = new File("DO_NOT_DELETE.txt");
            PrintWriter output = null;
            try {
                output = new PrintWriter(file);
            } catch (FileNotFoundException ex) {
                WarningJDialog warning = new WarningJDialog(this, true);
                warning.printMessage("      !!WARNING!! \n FILE NOT FOUND!! \n Program Cannot write to file");
                warning.setVisible(true);
                return;
            }
            output.close();
            try {
				input = new BufferedReader(new FileReader(file));
			} catch (FileNotFoundException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
        }
        for (int i = 0; i < 9; i++) {
            String[] breakmarks = new String[]{"--itemName--", "--size--", "--color--", "--gender--", "--price--",
                "--amnt--", "--descr--", "--condition--", "--popularity--", "--end--"
            };
            try {
                String line = input.readLine();
                while ((line = input.readLine()) != null && !line.equals(breakmarks[i + 1])) {
                    switch (i) {
                        case 0:
                            toAdd(itemNameComboBox, line.trim()); break;
                        case 1:
                            toAdd(sizeComboBox, line.trim()); break;
                        case 2:
                            toAdd(colorComboBox, line.trim()); break;
                        case 3:
                            toAdd(genderComboBox, line.trim()); break;
                        case 4:
                            toAdd(priceComboBox, line.trim()); break;
                        case 5:
                            toAdd(amntComboBox, line.trim()); break;
                        case 6:
                            toAdd(descrComboBox, line.trim()); break;
                        case 7:
                            toAdd(conditionComboBox, line.trim()); break;
                        case 8:
                            toAdd(popularityComboBox, line.trim()); break;
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(Inventory.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
    	/* GUI initial components loaded
    	 */
        infoPanel = new javax.swing.JPanel();
        innerInfoPanel = new javax.swing.JPanel();
        tableScrollPanel = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        itemNameComboBox = new javax.swing.JComboBox();
        sizeComboBox = new javax.swing.JComboBox();
        colorComboBox = new javax.swing.JComboBox();
        genderComboBox = new javax.swing.JComboBox();
        priceComboBox = new javax.swing.JComboBox();
        amntComboBox = new javax.swing.JComboBox();
        descrComboBox = new javax.swing.JComboBox();
        conditionComboBox = new javax.swing.JComboBox();
        popularityComboBox = new javax.swing.JComboBox();
        titlePanel = new javax.swing.JPanel();
        titleLbl = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        removeBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        returnBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        openBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        printBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        infoPanel.setBackground(new java.awt.Color(204, 255, 255));
        infoPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 204), 3));

        innerInfoPanel.setBackground(new java.awt.Color(204, 255, 255));

        inventoryTable.setAutoCreateRowSorter(true);
        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Name", "Size", "Color", "Gender", "Price", "Amount", "Description", "Condition", "Popularity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableScrollPanel.setViewportView(inventoryTable);
        inventoryTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        inventoryTable.getColumnModel().getColumn(1).setPreferredWidth(15);
        inventoryTable.getColumnModel().getColumn(2).setPreferredWidth(25);
        inventoryTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        inventoryTable.getColumnModel().getColumn(4).setPreferredWidth(20);
        inventoryTable.getColumnModel().getColumn(5).setPreferredWidth(5);
        inventoryTable.getColumnModel().getColumn(6).setPreferredWidth(120);

        itemNameComboBox.setEditable(true);
        itemNameComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item Name:", "Album", "Bookends", "Box", "Door Sign", "Frame", "Hooks", "Letter", "Mirror", "Bear Basket", "Nighty Night Basket", "Sweet Dreams Bucket", "Tub Time Roll", "Tray" }));
        itemNameComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameComboBoxActionPerformed(evt);
            }
        });

        sizeComboBox.setEditable(true);
        sizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Size:", "5X5", "Large", "Small" }));
        sizeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeComboBoxActionPerformed(evt);
            }
        });

        colorComboBox.setEditable(true);
        colorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Color:", "Blue", "Pink", "Aqua", "Purple", "Red", "Orange", "Green", "Yellow" }));
        colorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorComboBoxActionPerformed(evt);
            }
        });

        genderComboBox.setEditable(true);
        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Gender:", "Neutral", "Girl", "Boy" }));
        genderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genderComboBoxActionPerformed(evt);
            }
        });

        priceComboBox.setEditable(true);
        priceComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Price:" }));
        priceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priceComboBoxActionPerformed(evt);
            }
        });

        amntComboBox.setEditable(true);
        amntComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Amount:", "1" }));
        amntComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amntComboBoxActionPerformed(evt);
            }
        });

        descrComboBox.setEditable(true);
        descrComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Description:" }));
        descrComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descrComboBoxActionPerformed(evt);
            }
        });

        conditionComboBox.setEditable(true);
        conditionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Condition:", "In Workshop", "In Store", "Damaged", "Sold" }));
        conditionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conditionComboBoxActionPerformed(evt);
            }
        });

        popularityComboBox.setEditable(true);
        popularityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Popularity:" }));
        popularityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popularityComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout innerInfoPanelLayout = new javax.swing.GroupLayout(innerInfoPanel);
        innerInfoPanel.setLayout(innerInfoPanelLayout);
        innerInfoPanelLayout.setHorizontalGroup(
            innerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(innerInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(innerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 856, Short.MAX_VALUE)
                    .addGroup(innerInfoPanelLayout.createSequentialGroup()
                        .addComponent(itemNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(priceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(amntComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(descrComboBox, 0, 138, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(conditionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(popularityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        innerInfoPanelLayout.setVerticalGroup(
            innerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, innerInfoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(innerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(itemNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popularityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conditionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amntComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descrComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(innerInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addComponent(innerInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        titlePanel.setBackground(new java.awt.Color(204, 255, 255));
        titlePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 204), 3));

        titleLbl.setBackground(new java.awt.Color(204, 255, 255));
        titleLbl.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        titleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLbl.setText("EDIT INVENTORY");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, titlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 987, Short.MAX_VALUE)
                .addContainerGap())
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
        );

        buttonPanel.setBackground(new java.awt.Color(204, 255, 255));
        buttonPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 204), 3));

        removeBtn.setText("Remove");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        returnBtn.setText("Back To Main");
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        saveBtn.setText("SAVE");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        openBtn.setText("OPEN");
        openBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBtnActionPerformed(evt);
            }
        });

        clearBtn.setText("CLEAR TABLE");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        printBtn.setText("PRINT PAGE");
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(printBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(removeBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(exitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(returnBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(clearBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(openBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                .addContainerGap())
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearBtn)
                .addGap(4, 4, 4)
                .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(printBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                .addComponent(returnBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitBtn)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
            .addComponent(titlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>

private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {                                       
	/* adds given information to the tableArray, which represents a 2 dim Object array of
	 * all of the data in the table.  Next, the drawNewTable() method is called and (using the
	 * data stored in tableArray) the table is redrawn with new information added.
	 */
    addRemoveRow(1);
    tableArray[rowNum - 1][0] = itemName;
    tableArray[rowNum - 1][1] = size;
    tableArray[rowNum - 1][2] = color;
    tableArray[rowNum - 1][3] = gender;
    tableArray[rowNum - 1][4] = "$" + price;
    tableArray[rowNum - 1][5] = amount;
    tableArray[rowNum - 1][6] = description;
    tableArray[rowNum - 1][7] = condition;
    tableArray[rowNum - 1][8] = popularity;
    drawNewTable();
}                                      

private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
	/* removes all selected rows from the table (and tableArray)
	 */
    int[] toRemove = inventoryTable.getSelectedRows(); //obtains rows to remove

    int numDef = 0;
    //removes selected rows
    for (int i : toRemove) {
        i = i - numDef;
        //shifts data over selected row
        for (int j = i; j < rowNum - 1; j++) {
            for (int k = 0; k <= 8; k++) {
                inventoryTable.setValueAt(inventoryTable.getValueAt(j + 1, k), j, k);  //replaced a long list of setValue statements                    

                tableArray[j][k] = tableArray[j + 1][k];
            }
        }
        //removes one row
        addRemoveRow(-1);
        numDef++;
    }
}                                         

    private void addRemoveRow(int x) {
    	/* Helper method that adds a row to the table (and one element to the end of tableArray
    	 */
        Object[][] newTable = new Object[rowNum + x][9];
        int length = 0;
        if (x < 0) {
            length = newTable.length;
        } else {
            length = tableArray.length;
        }
        for (int i = 0; i < length; i++) {
            for (int j = 0; j < tableArray[0].length; j++) {
                newTable[i][j] = tableArray[i][j];
            }
        }
        tableArray = newTable;
        drawNewTable();
        rowNum += x;
    }

    private void drawNewTable() {
    	/* "redraws" table using data stored in tableArray (2D array)
    	 */
        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(tableArray,
                new String[]{
                    "Item Name", "Size", "Color", "Gender", "Price", "Amount", "Description", "Condition", "Popularity"
                }));
    }

private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {                                          
	/* returns to main menu
	 */
    this.setVisible(false);
    new mainM().setVisible(true);
}                                         

private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
	/* exits the entire program and saves the information from the ComboBoxes
	 * into a text file called "DO_NOT_DELETE.txt"
	 */
    File file = new File("DO_NOT_DELETE.txt");
    PrintWriter output = null;
    try {
        output = new PrintWriter(file);
    } catch (FileNotFoundException ex) {
        WarningJDialog warning = new WarningJDialog(this, true);
        warning.printMessage("      !!WARNING!! \n FILE NOT FOUND!! \n Program Cannot write to file");
        warning.setVisible(true);
        return;
    }
    output.println("--itemName--");
    printToFileComboBoxStorage(itemNameComboBox, output);
    output.println("--size--");
    printToFileComboBoxStorage(sizeComboBox, output);
    output.println("--color--");
    printToFileComboBoxStorage(colorComboBox, output);
    output.println("--gender--");
    printToFileComboBoxStorage(genderComboBox, output);
    output.println("--price--");
    printToFileComboBoxStorage(priceComboBox, output);
    output.println("--amnt--");
    printToFileComboBoxStorage(amntComboBox, output);
    output.println("--descr--");
    printToFileComboBoxStorage(descrComboBox, output);
    output.println("--condition--");
    printToFileComboBoxStorage(conditionComboBox, output);
    output.println("--popularity--");
    printToFileComboBoxStorage(popularityComboBox, output);
    output.println("--end--");

    output.close();

    WarningJDialog warning = new WarningJDialog(this, true);
    warning.printExitMessage("PROGRAM WILL NOW CLOSE... \n\n GOOD BYE!!", "CANCEL");
    warning.setVisible(true);
    System.exit(0);
}                                       

    private void printToFileComboBoxStorage(javax.swing.JComboBox comboBox, PrintWriter output) {
    	/* prints all items of the comboBox sent into a file (also sent)
    	 */
        for (int i = 0; i < comboBox.getItemCount(); i++) {
            output.println(comboBox.getItemAt(i).toString());
        }
    }

private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
	/* saves the table array and the combo Box information to a file.
	 * the table array is saved to a file designated by the User
	 * the combo box information is again stored in "DO_NOT_DELETE.txt"
	 */
    File file = MessageUtil.getPath(inventoryTable, MessageUtil.SAVE, MessageUtil.FILES_ONLY);
    if (file == null) {
        return;
    }
    PrintWriter output = null;
    try {
        output = new PrintWriter(file);
    } catch (FileNotFoundException ex) {
        WarningJDialog warning = new WarningJDialog(this, true);
        warning.printMessage("      !!WARNING!! \n FILE NOT FOUND!! \n Program Cannot write to file");
        warning.setVisible(true);
    }

    //print data to file
    for (Object[] itemArray : tableArray) {
        for (Object item : itemArray) {
            output.print(item + "||");
        }
        output.println("--endRow--||");
    }
    //output.println("--end--||");
    output.close();


    File storage = new File("DO_NOT_DELETE.txt");
    PrintWriter out = null;
    try {
        out = new PrintWriter(storage);
    } catch (FileNotFoundException ex) {
        WarningJDialog warning = new WarningJDialog(this, true);
        warning.printMessage("      !!WARNING!! \n FILE NOT FOUND!! \n Program Cannot write to file");
        warning.setVisible(true);
        return;
    }
    out.println("--itemName--");
    printToFileComboBoxStorage(itemNameComboBox, out);
    out.println("--size--");
    printToFileComboBoxStorage(sizeComboBox, out);
    out.println("--color--");
    printToFileComboBoxStorage(colorComboBox, out);
    out.println("--gender--");
    printToFileComboBoxStorage(genderComboBox, out);
    out.println("--price--");
    printToFileComboBoxStorage(priceComboBox, out);
    out.println("--amnt--");
    printToFileComboBoxStorage(amntComboBox, out);
    out.println("--descr--");
    printToFileComboBoxStorage(descrComboBox, out);
    out.println("--condition--");
    printToFileComboBoxStorage(conditionComboBox, out);
    out.println("--popularity--");
    printToFileComboBoxStorage(popularityComboBox, out);
    out.println("--end--");

    out.close();
}                                       

private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {                                        
	/* using a jfilechooser interface the user can choose a file to open (this should be
	 * a file previously created by the user by this program.
	 */
    File file = MessageUtil.getPath(inventoryTable, MessageUtil.OPEN, MessageUtil.FILES_ONLY);
    if (file == null) {
        return;
    }
    BufferedReader input = null;
    try {
        input = new BufferedReader(new FileReader(file));
    } catch (FileNotFoundException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }

    String line;
    tableArray = new Object[1][9];
    rowNum = 0;
    int lineNum = 0;
    try {
        while ((line = input.readLine()) != null && !line.equals("")) {
            lineNum++;
            addRemoveRow(1);  //adds one row to tableArray (and to table)

            int start = 0;
            int end = line.indexOf("||", start);

            for (int i = 0; i < tableArray[0].length; i++) {
                try {
                    String word = line.substring(start, end);
                    System.out.println("row: " + rowNum + "  i: " + i + " word: " + word + " \t end: " + end + " tbl length: " + tableArray.length + ", " + tableArray[0].length);
                    tableArray[rowNum - 1][i] = word.trim();
                    start = end + 2;
                    end = line.indexOf("||", start);
                } catch (java.lang.StringIndexOutOfBoundsException e) {
                    WarningJDialog warning = new WarningJDialog(this, true);
                    warning.printMessage("      !!WARNING!! \n FILE NOT FOUND!! \n Program Cannot write to file");
                    warning.setVisible(true);
                    i = tableArray[0].length;
                    line = null;
                }

            }

        }
        input.close();
    } catch (IOException e) {
        // TODO Auto-generated catch block
        e.printStackTrace();
    }
    drawNewTable();
}                                       

private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {                                           
	/* clears whole table;
	 */
    addRemoveRow(-rowNum);
}

    private void toAdd(javax.swing.JComboBox box, Object compareItem) {
    	/* Adds compareItem (some object) to the ComboBox list of items
    	 */
        int item = 0;
        for (int i = 0; i < box.getItemCount(); i++) {
            if (box.getItemAt(i).toString().equals(compareItem.toString())) {
                item = 1;
                i = box.getItemCount();
            }
        }
        if (item == 0) {
            box.addItem(compareItem);
        }
    }

private void itemNameComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                 
	/* assigns chosen item to itemName
	 */
    itemName = itemNameComboBox.getSelectedItem().toString();
    toAdd(itemNameComboBox, itemName);
}                                                

private void sizeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                             
	/* assigns chosen item to size
	 */
    size = sizeComboBox.getSelectedItem().toString();
    toAdd(sizeComboBox, size);
}                                            

private void colorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
	/* assigns chosen item to color
	 */
    color = colorComboBox.getSelectedItem().toString();
    toAdd(colorComboBox, color);
}                                             

private void genderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                               
	/* assigns chosen item to gender
	 */
    gender = genderComboBox.getSelectedItem().toString();
    toAdd(genderComboBox, gender);
}                                              

private void priceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
	/* assigns chosen item to price
	 * (adds price to priceComboBox where needed
	 */
    String input = priceComboBox.getSelectedItem().toString();
    if (input.charAt(0) == '$') {
        input = input.substring(1).trim();
    }
    try {
        price = Double.parseDouble(input);
        int nameItem = 0;
        for (int i = 0; i < priceComboBox.getItemCount(); i++) {
            if (priceComboBox.getItemAt(i).equals(priceForm.format(price))) {
                nameItem = 1;
                i = priceComboBox.getItemCount();
            }
        }
        if (nameItem == 0) { //&& !itemNameComboBox.getSelectedItem().equalsIgnoreCase("Item Name:")) {
            priceComboBox.addItem(priceForm.format(price));
        }
    } catch (java.lang.NumberFormatException e) {
        WarningJDialog warning = new WarningJDialog(this, true);
        warning.printMessage("      !!WARNING!! \n Prices must be entered \nin the format: " +
                "\n  $####.## or ####.## or #### \n\n  ex: $400.00 or 400.00 or 400");
        warning.setVisible(true);
        priceComboBox.setSelectedIndex(0);
    }
}                                             

private void amntComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                             
	/* assigns chosen item to amount
	 * (adds amount to combo box list where needed)
	 */
    String input = amntComboBox.getSelectedItem().toString();
    try {
        amount = Integer.parseInt(input);
        int nameItem = 0;
        for (int i = 0; i < amntComboBox.getItemCount(); i++) {
            if (amntComboBox.getItemAt(i).equals(Integer.toString(amount))) {
                nameItem = 1;
                i = amntComboBox.getItemCount();
            }
        }
        if (nameItem == 0) { //&& !itemNameComboBox.getSelectedItem().equalsIgnoreCase("Item Name:")) {

            amntComboBox.addItem(Integer.toString(amount));
        }
    } catch (java.lang.NumberFormatException e) {
        WarningJDialog warning = new WarningJDialog(this, true);
        warning.printMessage("      !!WARNING!! \n Amounts must be entered \nin the format: " +
                "\n  #### \n  ex: 1, 30, 4240");
        warning.setVisible(true);
        amntComboBox.setSelectedIndex(0);
    }
}                                            

private void descrComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                              
	/* assigns chosen item to description
	 */
    description = descrComboBox.getSelectedItem().toString();
    toAdd(descrComboBox, description);
}                                             

private void conditionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                  
	/* assigns chosen item to condition
	 */
    condition = conditionComboBox.getSelectedItem().toString();
    toAdd(conditionComboBox, condition);
}                                                 

private void popularityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                   
	/* assigns chosen item to popularity
	 */
    popularity = popularityComboBox.getSelectedItem().toString();
    toAdd(popularityComboBox, popularity);
}

private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {                                         
	/* prints inventoryTable to printer
	 */
    try {
        inventoryTable.print();
    } catch (PrinterException ex) {                                        
            Logger.getLogger(Inventory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
                                                  

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Inventory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton addBtn;
    private javax.swing.JComboBox amntComboBox;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton clearBtn;
    private javax.swing.JComboBox colorComboBox;
    private javax.swing.JComboBox conditionComboBox;
    private javax.swing.JComboBox descrComboBox;
    private javax.swing.JButton exitBtn;
    private javax.swing.JComboBox genderComboBox;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JPanel innerInfoPanel;
    public static javax.swing.JTable inventoryTable;
    private javax.swing.JComboBox itemNameComboBox;
    private javax.swing.JButton openBtn;
    private javax.swing.JComboBox popularityComboBox;
    private javax.swing.JComboBox priceComboBox;
    private javax.swing.JButton printBtn;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton returnBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JComboBox sizeComboBox;
    private javax.swing.JScrollPane tableScrollPanel;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JPanel titlePanel;
    //---break---
    private int rowNum = 0;
    private Object[][] tableArray = new Object[][]{{null, null, null, null, null, null, null, null, null}};
    private String itemName;
    private String size;
    private String color;
    private String gender;
    private double price = 0.00;
    private int amount = 1;
    private String description;
    private String condition;
    private String popularity;
    private DecimalFormat priceForm = new DecimalFormat("$####.00");
    // End of variables declaration
}
